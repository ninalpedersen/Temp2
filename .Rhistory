linear.model(cars$speed~cars$dist)
#summary(lm(cars$speed~cars$dist))
#' @export
#' @return HELLO
#' @title Density estimation plot
#' @usage Density.plot(x,n = 500,method,from,to)
#'
#' @description This function estimates the density of the given data.
#'
#' @param x numeric variable
#' @param n point you are evaluating to obtain its density
#' @param method method for estimating the density. Is either "naive" or "kernel". Set default as "naive".
#' @param from r
#' @param to r
#'
#' @author Nina Louise Pedersen \cr
#' Institute of Mathematics and Computer Science (IMADA) \cr
#' University of Sourthern Denmark, (SDU) \cr
#' \email{npede14@student.sdu.dk} \cr
#'
#' @examples
#' #Add examples for the function to explain to others how they can be used
#'
#'
linear.model <- function(formula){
# =====================================================
if(formula != as.formula(formula)){
stop("a formula must be provided")
}
# =====================================================
#the first lines are from the lm function
mcall <- match.call()
mf <- match.call() # Set up matrix
mf[[1L]] <- quote(stats::model.frame) # 1L holds 1 as integer
mf <- eval(mf, parent.frame())
nrows <- dim(mf)[1] # In the books this
ncols <- dim(mf)[2]
# Find X and Y from formula
Y <- mf[,1]
X <- rep(1,nrows)
for(i in 2:ncols){
X <- cbind(X,mf[,i])
}
betaHat <- solve(t(X)%*%X)%*%(t(X)%*%Y)
YHat <- X%*%betaHat
eHat <- Y - YHat # The residuals
# The standard error of the residuals are the same as the standard deviation of the residuals
SER <- sd(eHat)
# Then we find the sum of squared residuals
RSS <- sum((eHat)^2)
# Then we find the sum of squares of Y's
SST <- sum((Y-mean(Y))^2)
# Then we find the R^2
R2 <- 1 - (RSS/SST)
# Then we find the adjusted coefficient of determination
R2.adj <- 1 - (RSS/(nrows-(ncols-1)-1))/(SST/(nrows-1))
# Then we find the F-statistic and we start by finding the regression sum of squares, SSreg
SSreg <- sum((YHat-mean(Y))^2)
F.stat <- (SSreg/(ncols-1))/(RSS/(nrows-ncols))
# Then we calculate the degress of freedom
df <- nrows - (ncols-1) - 1
# Then we find the p-value by using the F distribution since we know the F-statistic
p.value <- 1 - pf(F.stat,ncols-1,df)
# Then we find the standard error and to find it then we will need to find the error variance
EV <- RSS/(nrows-(ncols-1)-1)
SE <- sqrt(diag(EV%*%solve(t(X)%*%X)))
# Then we find the t-value
t.value <- betaHat/SE
Pr <- 1 - pt(abs(t.value),df)
# Creating the table.
print(list("Call" = mcall, "Residuals" = data.frame("Min" = min(eHat), "Q1" = quantile(eHat,.25), "Median" = median(eHat), "Q3" = quantile(eHat,.75), "Max" = max(eHat), row.names = " "),
"Coefficients" = data.frame("Estimate" = betaHat, "Std. Error" = SE, "t value" = t.value, "Pr(>|t|)" = Pr)))
}
linear.model(cars$speed~cars$dist)
#summary(lm(cars$speed~cars$dist))
library(Temp2)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
View(linear.model)
View(line.model)
library(Temp2)
linear.model(cars$speed~cars$dist)
summary(lm(cars$speed~cars$dist))
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
linear.model <- function(formula){
#------------------------------------Error Handler:--------------------------------------#
# ---------------------------------------------------------------------------------------#
# 'formula' has to be of the type 'language'                                             #
#----------------------------------------------------------------------------------------#
#We only check that 'formula' is of the correct type, because this type of input is very
#hard to work with, we don't know what else to check for.
if(typeof(formula) != "language"){
stop("Your input must be presented in the language type, see documentation for examples")
}
#---------------------------------------End Error Handler---------------------------------#
call <- match.call() #This one is saved for the summary at the end of the function
mf <- match.call() #This is used for setting up our matrix. This is equal to the exact call
mf[[1L]] <- quote(stats::model.frame) #Change the called function in the call to stats::model.frame. Evaluating this gives us what we need
mf <- eval(mf, parent.frame()) #This evaluates our model frame using information from the parent environment.
#Most calculations below are done based on chapter 5 of "A modern approach to regression with R"
#Page referrences are to that book.
width <- dim(mf)[2] #Save the information about the dimensions of the matrix. This is needed for later. In the regression book, width=p-1
height <- dim(mf)[1] #Also saved for later. height = n
Y <- mf[,1] #Y is the dependent variable. Page 131 in book.
X <- rep(1,height) #X is a matrix that contains a column of 1s, and then columns of the other data. Page 131 in book.
for(i in 2:width){
X <- cbind(X,mf[,i]) #The other variables are added. Page 131 in book.
}
bEst <- as.vector(solve((t(X)%*%X))%*%t(X)%*%Y) #bEst is the estimated betas. Page 132 formula (5.6). Solve inverts a matrix, t() transposes a matrix, %*% is matrix multiplication.
Yhat <- X%*%bEst #Estimated Y's, so caleld Yhat. Page 132 formula (5.7)
residuals <- as.vector(Y - Yhat) #Estimated error, i.e. residuals, so called ehat. Page 132 formula (5.8)
RSE <- sd(residuals) #Residual standard error is equal to the standard deviation of the residuals
RSS <- sum((residuals)^2) #Least squares estimates, needed for Rsquare. Page 135 top.
SST <- sum((Y - mean(Y))^2) #Sum of squares of Y, needed for Rsquare. Page 135 bottom.
Rsquare <- 1 - (RSS/SST) #Multiple R-squared calculated using RSS and SST. Page 136 Note 1.
RsquareAdj <- 1 - (RSS/(height-width-2))/(SST/(height-1)) #Adjusted R-squared, using formula from book. Reminder: height = n, width = p - 1. Page 137 Note 1.
SSreg <- sum((Yhat - mean(Y))^2) #Page 135 bottom. Used to calculate the F-statistic
Fstat <- (SSreg/(width-1))/(RSS/(height-width-2)) #Formula to calculate F-statistic. Page 136 middle.
df <- height - width #degrees of freedom is generally the amount of data minus the amount of different parameters.
pval <- 1 - pf(Fstat,width-1,height-width-2) #To calculate the p-value, we use F-statistics, since we already have the Fstat.
SS <- (1/(height - width - 2))*sum((residuals)^2) #Error variance, S^2. Page 135 top.
SE <- as.vector(sqrt(diag(SS*solve(t(X)%*%X)))) #Standard Error. Page 134 Var(betahat|X), replace sigma^2 by SS. Note that Diag is used because all outliers are irrelevant. Book does not explain why
Tval <- bEst/SE #Page 135, middle. t-value, note that beta_i is 0, and so isnt in the equation
Pr <- 1-pt(abs(Tval),df) #Pr(>|t|) values. Calculated directly as it is described, using t distribution.
#Making the table for residuals, based on how summary() would do it.
res <- data.frame("Min" = min(residuals),"Q1"=quantile(residuals,0.25,names=FALSE), "Median" = median(residuals), "Q3"=quantile(residuals,0.75,names=FALSE), "Max" = max(residuals), row.names='')
#Getting the names of the things for coefficient table
y <- toString(call[2]) #Gets the entire argument as a string
y2 <- strsplit(y, c("+"), fixed = TRUE) #Splits into parts based on +
y3 <- unique(y2[[1]]) #Makes it into a vector of strings, that contains unique instances in it.
y4 <- strsplit(y3[1], c(" "), fixed = TRUE) #splits the first part of the argument, namely "dependent ~ predictor1"
if(length(y3) > 2){ #Depending on how many more predictors are chosen after the first, we piece them together accordingly in a vector.
y3 <- y3[2:length(y3)] #If there is more than 1.
} else if(length(y3) == 2){
y3 <- y3[2] #If there is exactly 1 more.
} else{
y3 <- c() #If there is only 1 predictor after ~, then y3 is no longer needed.
}
y4 <- unique(y4[[1]]) #We turn this into a vector of strings
y4 <- y4[3] #We are not interested in the dependent variable or the ~, so we remove them
y5 <- c(y4,y3) #We combine y4 and y3.
y5 <- trimws(y5) #We trim away whitespace in the strings.
#Coefficient table names
coefNames <- c("(Intercept)") #The first coefficient name is always (intercept)
for(i in 1:length(bEst)-1){ #we know that we need names for length(bEst)-1 coefficients.
coefNames <- c(coefNames,y5[i]) #Name vector is created properly
}
if(length(y5) > length(bEst)-1){ #If we did not use all the names, it means there is something wrong with the input. User is notified.
message("Some inputs were ignored, please try the I() function, and see if this helps. Examples can be found in the help file.")
}
coef <- data.frame("Estimate" = bEst, "Std.Error" = SE, "t value" = Tval, "Pr.t" = Pr, row.names=coefNames) #The coefficients are saved as a data.frame. We chose this over a table as we found this easier to work with.
print(list("Call" = call, "Residuals" = res, "Coefficients" = coef)) #Prints a list containing the call, the residuals and the coefficients just like summary()
print(paste0("Residual standard error: ",format(RSE,digits=4)," on ",df," degrees of freedom")) #Prints extra information, namely RSE with 4 digits, as well as degrees of freedom.
print(paste0("Multiple R-squared: ",format(Rsquare,digits=4), ", Adjusted R-squared: ", format(RsquareAdj,digits=4))) #Extra information, R^2 and R_Adj^2
print(paste0("F-statistic: ", format(Fstat,digits=4), ", p-value: ", format(pval,3))) #Extra information, F-statistic and p-value
#Returns residuals, RSE, R^2, R_Adj^2, F-statistic, degrees of freedom, p-value as well as the coefficient data.frame. This is done using invisible so it does NOT print it unless user explicitly asks for it later.
return(invisible(list("residuals" = residuals,"RSE" = RSE, "Rsquared" = Rsquare, "RsquaredAdj" = RsquareAdj, "Fstat" = Fstat, "DF" = df, "pval" = pval, "coefficients" = coef)))
}
linear.model2 <- function(formula){
#------------------------------------Error Handler:--------------------------------------#
# ---------------------------------------------------------------------------------------#
# 'formula' has to be of the type 'language'                                             #
#----------------------------------------------------------------------------------------#
#We only check that 'formula' is of the correct type, because this type of input is very
#hard to work with, we don't know what else to check for.
if(typeof(formula) != "language"){
stop("Your input must be presented in the language type, see documentation for examples")
}
#---------------------------------------End Error Handler---------------------------------#
call <- match.call() #This one is saved for the summary at the end of the function
mf <- match.call() #This is used for setting up our matrix. This is equal to the exact call
mf[[1L]] <- quote(stats::model.frame) #Change the called function in the call to stats::model.frame. Evaluating this gives us what we need
mf <- eval(mf, parent.frame()) #This evaluates our model frame using information from the parent environment.
#Most calculations below are done based on chapter 5 of "A modern approach to regression with R"
#Page referrences are to that book.
width <- dim(mf)[2] #Save the information about the dimensions of the matrix. This is needed for later. In the regression book, width=p-1
height <- dim(mf)[1] #Also saved for later. height = n
Y <- mf[,1] #Y is the dependent variable. Page 131 in book.
X <- rep(1,height) #X is a matrix that contains a column of 1s, and then columns of the other data. Page 131 in book.
for(i in 2:width){
X <- cbind(X,mf[,i]) #The other variables are added. Page 131 in book.
}
bEst <- as.vector(solve((t(X)%*%X))%*%t(X)%*%Y) #bEst is the estimated betas. Page 132 formula (5.6). Solve inverts a matrix, t() transposes a matrix, %*% is matrix multiplication.
Yhat <- X%*%bEst #Estimated Y's, so caleld Yhat. Page 132 formula (5.7)
residuals <- as.vector(Y - Yhat) #Estimated error, i.e. residuals, so called ehat. Page 132 formula (5.8)
RSE <- sd(residuals) #Residual standard error is equal to the standard deviation of the residuals
RSS <- sum((residuals)^2) #Least squares estimates, needed for Rsquare. Page 135 top.
SST <- sum((Y - mean(Y))^2) #Sum of squares of Y, needed for Rsquare. Page 135 bottom.
Rsquare <- 1 - (RSS/SST) #Multiple R-squared calculated using RSS and SST. Page 136 Note 1.
RsquareAdj <- 1 - (RSS/(height-width-2))/(SST/(height-1)) #Adjusted R-squared, using formula from book. Reminder: height = n, width = p - 1. Page 137 Note 1.
SSreg <- sum((Yhat - mean(Y))^2) #Page 135 bottom. Used to calculate the F-statistic
Fstat <- (SSreg/(width-1))/(RSS/(height-width-2)) #Formula to calculate F-statistic. Page 136 middle.
df <- height - width #degrees of freedom is generally the amount of data minus the amount of different parameters.
pval <- 1 - pf(Fstat,width-1,height-width-2) #To calculate the p-value, we use F-statistics, since we already have the Fstat.
SS <- (1/(height - width - 2))*sum((residuals)^2) #Error variance, S^2. Page 135 top.
SE <- as.vector(sqrt(diag(SS*solve(t(X)%*%X)))) #Standard Error. Page 134 Var(betahat|X), replace sigma^2 by SS. Note that Diag is used because all outliers are irrelevant. Book does not explain why
Tval <- bEst/SE #Page 135, middle. t-value, note that beta_i is 0, and so isnt in the equation
Pr <- 1-pt(abs(Tval),df) #Pr(>|t|) values. Calculated directly as it is described, using t distribution.
#Making the table for residuals, based on how summary() would do it.
res <- data.frame("Min" = min(residuals),"Q1"=quantile(residuals,0.25,names=FALSE), "Median" = median(residuals), "Q3"=quantile(residuals,0.75,names=FALSE), "Max" = max(residuals), row.names='')
#Getting the names of the things for coefficient table
y <- toString(call[2]) #Gets the entire argument as a string
y2 <- strsplit(y, c("+"), fixed = TRUE) #Splits into parts based on +
y3 <- unique(y2[[1]]) #Makes it into a vector of strings, that contains unique instances in it.
y4 <- strsplit(y3[1], c(" "), fixed = TRUE) #splits the first part of the argument, namely "dependent ~ predictor1"
if(length(y3) > 2){ #Depending on how many more predictors are chosen after the first, we piece them together accordingly in a vector.
y3 <- y3[2:length(y3)] #If there is more than 1.
} else if(length(y3) == 2){
y3 <- y3[2] #If there is exactly 1 more.
} else{
y3 <- c() #If there is only 1 predictor after ~, then y3 is no longer needed.
}
y4 <- unique(y4[[1]]) #We turn this into a vector of strings
y4 <- y4[3] #We are not interested in the dependent variable or the ~, so we remove them
y5 <- c(y4,y3) #We combine y4 and y3.
y5 <- trimws(y5) #We trim away whitespace in the strings.
#Coefficient table names
coefNames <- c("(Intercept)") #The first coefficient name is always (intercept)
for(i in 1:length(bEst)-1){ #we know that we need names for length(bEst)-1 coefficients.
coefNames <- c(coefNames,y5[i]) #Name vector is created properly
}
if(length(y5) > length(bEst)-1){ #If we did not use all the names, it means there is something wrong with the input. User is notified.
message("Some inputs were ignored, please try the I() function, and see if this helps. Examples can be found in the help file.")
}
coef <- data.frame("Estimate" = bEst, "Std.Error" = SE, "t value" = Tval, "Pr.t" = Pr, row.names=coefNames) #The coefficients are saved as a data.frame. We chose this over a table as we found this easier to work with.
print(list("Call" = call, "Residuals" = res, "Coefficients" = coef)) #Prints a list containing the call, the residuals and the coefficients just like summary()
print(paste0("Residual standard error: ",format(RSE,digits=4)," on ",df," degrees of freedom")) #Prints extra information, namely RSE with 4 digits, as well as degrees of freedom.
print(paste0("Multiple R-squared: ",format(Rsquare,digits=4), ", Adjusted R-squared: ", format(RsquareAdj,digits=4))) #Extra information, R^2 and R_Adj^2
print(paste0("F-statistic: ", format(Fstat,digits=4), ", p-value: ", format(pval,3))) #Extra information, F-statistic and p-value
#Returns residuals, RSE, R^2, R_Adj^2, F-statistic, degrees of freedom, p-value as well as the coefficient data.frame. This is done using invisible so it does NOT print it unless user explicitly asks for it later.
return(invisible(list("residuals" = residuals,"RSE" = RSE, "Rsquared" = Rsquare, "RsquaredAdj" = RsquareAdj, "Fstat" = Fstat, "DF" = df, "pval" = pval, "coefficients" = coef)))
}
linear.model2(cars$speed~cars$dist)
linear.model2 <- function(formula){
#------------------------------------Error Handler:--------------------------------------#
# ---------------------------------------------------------------------------------------#
# 'formula' has to be of the type 'language'                                             #
#----------------------------------------------------------------------------------------#
#We only check that 'formula' is of the correct type, because this type of input is very
#hard to work with, we don't know what else to check for.
if(typeof(formula) != "language"){
stop("Your input must be presented in the language type, see documentation for examples")
}
#---------------------------------------End Error Handler---------------------------------#
call <- match.call() #This one is saved for the summary at the end of the function
mf <- match.call() #This is used for setting up our matrix. This is equal to the exact call
mf[[1L]] <- quote(stats::model.frame) #Change the called function in the call to stats::model.frame. Evaluating this gives us what we need
mf <- eval(mf, parent.frame()) #This evaluates our model frame using information from the parent environment.
#Most calculations below are done based on chapter 5 of "A modern approach to regression with R"
#Page referrences are to that book.
width <- dim(mf)[2] #Save the information about the dimensions of the matrix. This is needed for later. In the regression book, width=p-1
height <- dim(mf)[1] #Also saved for later. height = n
Y <- mf[,1] #Y is the dependent variable. Page 131 in book.
X <- rep(1,height) #X is a matrix that contains a column of 1s, and then columns of the other data. Page 131 in book.
for(i in 2:width){
X <- cbind(X,mf[,i]) #The other variables are added. Page 131 in book.
}
bEst <- solve((t(X)%*%X))%*%t(X)%*%Y #bEst is the estimated betas. Page 132 formula (5.6). Solve inverts a matrix, t() transposes a matrix, %*% is matrix multiplication.
Yhat <- X%*%bEst #Estimated Y's, so caleld Yhat. Page 132 formula (5.7)
residuals <- as.vector(Y - Yhat) #Estimated error, i.e. residuals, so called ehat. Page 132 formula (5.8)
RSE <- sd(residuals) #Residual standard error is equal to the standard deviation of the residuals
RSS <- sum((residuals)^2) #Least squares estimates, needed for Rsquare. Page 135 top.
SST <- sum((Y - mean(Y))^2) #Sum of squares of Y, needed for Rsquare. Page 135 bottom.
Rsquare <- 1 - (RSS/SST) #Multiple R-squared calculated using RSS and SST. Page 136 Note 1.
RsquareAdj <- 1 - (RSS/(height-width-2))/(SST/(height-1)) #Adjusted R-squared, using formula from book. Reminder: height = n, width = p - 1. Page 137 Note 1.
SSreg <- sum((Yhat - mean(Y))^2) #Page 135 bottom. Used to calculate the F-statistic
Fstat <- (SSreg/(width-1))/(RSS/(height-width-2)) #Formula to calculate F-statistic. Page 136 middle.
df <- height - width #degrees of freedom is generally the amount of data minus the amount of different parameters.
pval <- 1 - pf(Fstat,width-1,height-width-2) #To calculate the p-value, we use F-statistics, since we already have the Fstat.
SS <- (1/(height - width - 2))*sum((residuals)^2) #Error variance, S^2. Page 135 top.
SE <- as.vector(sqrt(diag(SS*solve(t(X)%*%X)))) #Standard Error. Page 134 Var(betahat|X), replace sigma^2 by SS. Note that Diag is used because all outliers are irrelevant. Book does not explain why
Tval <- bEst/SE #Page 135, middle. t-value, note that beta_i is 0, and so isnt in the equation
Pr <- 1-pt(abs(Tval),df) #Pr(>|t|) values. Calculated directly as it is described, using t distribution.
#Making the table for residuals, based on how summary() would do it.
res <- data.frame("Min" = min(residuals),"Q1"=quantile(residuals,0.25,names=FALSE), "Median" = median(residuals), "Q3"=quantile(residuals,0.75,names=FALSE), "Max" = max(residuals), row.names='')
#Getting the names of the things for coefficient table
y <- toString(call[2]) #Gets the entire argument as a string
y2 <- strsplit(y, c("+"), fixed = TRUE) #Splits into parts based on +
y3 <- unique(y2[[1]]) #Makes it into a vector of strings, that contains unique instances in it.
y4 <- strsplit(y3[1], c(" "), fixed = TRUE) #splits the first part of the argument, namely "dependent ~ predictor1"
if(length(y3) > 2){ #Depending on how many more predictors are chosen after the first, we piece them together accordingly in a vector.
y3 <- y3[2:length(y3)] #If there is more than 1.
} else if(length(y3) == 2){
y3 <- y3[2] #If there is exactly 1 more.
} else{
y3 <- c() #If there is only 1 predictor after ~, then y3 is no longer needed.
}
y4 <- unique(y4[[1]]) #We turn this into a vector of strings
y4 <- y4[3] #We are not interested in the dependent variable or the ~, so we remove them
y5 <- c(y4,y3) #We combine y4 and y3.
y5 <- trimws(y5) #We trim away whitespace in the strings.
#Coefficient table names
coefNames <- c("(Intercept)") #The first coefficient name is always (intercept)
for(i in 1:length(bEst)-1){ #we know that we need names for length(bEst)-1 coefficients.
coefNames <- c(coefNames,y5[i]) #Name vector is created properly
}
if(length(y5) > length(bEst)-1){ #If we did not use all the names, it means there is something wrong with the input. User is notified.
message("Some inputs were ignored, please try the I() function, and see if this helps. Examples can be found in the help file.")
}
coef <- data.frame("Estimate" = bEst, "Std.Error" = SE, "t value" = Tval, "Pr.t" = Pr, row.names=coefNames) #The coefficients are saved as a data.frame. We chose this over a table as we found this easier to work with.
print(list("Call" = call, "Residuals" = res, "Coefficients" = coef)) #Prints a list containing the call, the residuals and the coefficients just like summary()
print(paste0("Residual standard error: ",format(RSE,digits=4)," on ",df," degrees of freedom")) #Prints extra information, namely RSE with 4 digits, as well as degrees of freedom.
print(paste0("Multiple R-squared: ",format(Rsquare,digits=4), ", Adjusted R-squared: ", format(RsquareAdj,digits=4))) #Extra information, R^2 and R_Adj^2
print(paste0("F-statistic: ", format(Fstat,digits=4), ", p-value: ", format(pval,3))) #Extra information, F-statistic and p-value
#Returns residuals, RSE, R^2, R_Adj^2, F-statistic, degrees of freedom, p-value as well as the coefficient data.frame. This is done using invisible so it does NOT print it unless user explicitly asks for it later.
return(invisible(list("residuals" = residuals,"RSE" = RSE, "Rsquared" = Rsquare, "RsquaredAdj" = RsquareAdj, "Fstat" = Fstat, "DF" = df, "pval" = pval, "coefficients" = coef)))
}
linear.model2(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
library(Temp2)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
library(Temp2)
height <- read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
height$Father
height$Mother
linear.model(height$Height ~ height$Father+height$Mother)
summary(lm(height$Height ~ height$Father+height$Mother))
library(Temp2)
summary(lm(height$Height ~ height$Father+height$Mother))
linear.model(height$Height ~ height$Father+height$Mother)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother)
library(Temp2)
library(Temp2)
return(list("\n",Residual standard error" = SER, "R squared" = R2, "R squared adjacent" = R2.adj, "F-statistic" = F.stat, "Degrees of freedom" = df, "p-value" = p.value))
linear.model(height$Height ~ height$Father+height$Mother)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
linear.model(cars$speed~cars$dist)
library(Temp2)
lm(faithful$eruptions ~ faithful$waiting)
library(Temp2)
linear.model(faithful$eruptions ~ faithful$waiting)
linear.model(faithful$eruptions ~ faithful$waiting, Table = FALSE)
linear.model(faithful$eruptions ~ faithful$waiting, Table = TRUE)
library(Temp2)
linear.model(faithful$eruptions ~ faithful$waiting, Table = TRUE)
linear.model(faithful$eruptions ~ faithful$waiting,)
linear.model(faithful$eruptions ~ faithful$waiting)
library(Temp2)
linear.model(faithful$eruptions ~ faithful$waiting)"betaHat"[1]
linear.model(faithful$eruptions ~ faithful$waiting)$"betaHat"[1]
linear.model(faithful$eruptions ~ faithful$waiting)$"betaHat"[2]
linear.model(faithful$eruptions ~ faithful$waiting)$betaHat[2]
a <- linear.model(faithful$eruptions ~ faithful$waiting)$betaHat[2]
a
library(Temp2)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
height <- read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
4-(4-1)-1
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
summary(lm(height$Height ~ height$Father+height$Mother+height$Gender+height$SES))
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
summary(lm(height$Height ~ height$Father+height$Mother+height$Gender+height$SES))
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
library(Temp2)
linear.model(height$Height ~ height$Father+height$Mother+height$Gender+height$SES)
library(Temp2)
bootstrap(sport$Sport,sport$Grades,10000)
sport <- read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/sport.txt")
bootstrap(sport$Sport,sport$Grades,10000)
bootstrap(sport$Sport,sport$Grades,10000,plot = FALSE)
View(lm)
bootstrap(sport$Sport,sport$Grades,10000,plot = FALSE,color = "blue")
bootstrap(sport$Sport,sport$Grades,10000,plot = TRUE,color = "blue")
library(Temp2)
bootstrap(sport$Sport,sport$Grades,10000,plot = TRUE,color = "blue")
length(TRUE)
length(FALSE)
library(Temp2)
bootstrap(sport$Sport,sport$Grades,10000,plot = TRUE,color = "blue")
if(plot == TRUE || plot == FALSE){
library(Temp2)
bootstrap(sport$Sport,sport$Grades,10000,plot = TRUE,color = "blue")
library(Temp2)
bootstrap(sport$Sport,sport$Grades,10000,plot = TRUE,color = "blue")
bootstrap(sport$Sport,sport$Grades,10000,plot = BALH,color = "blue")
bootstrap(sport$Sport,sport$Grades,10000,plot = 5,color = "blue")
MarkovChain(matrix(c(1,2,3,4),ncol=2,byrow=TRUE),1,1000)
MarkovChain(matrix(c(.5,.5,.5,.5),ncol=2,byrow=TRUE),1,1000)
library(Temp2)
library(Temp2)
height <- read.table("https://raw.githubusercontent.com/haghish/ST516/master/data/height.txt")
linear.model(height$Height ~
height$Father+height$Mother+height$Gender+height$SES)
linear.model(height$Height ~
height$Father+height$Mother+height$Gender+height$SES)
linear.model(height$Height ~
height$Father+height$Mother+height$Gender+height$SES)
summary(lm(height$Height ~
height$Father+height$Mother+height$Gender+height$SES))
linear.model(238458385883)
as.formula(dfghjkl)
as.formula(c(1,2))
c(1,2) = as.formula(c(1,2))
c(1,2) == as.formula(c(1,2))
linear.model(height$Father)
linear.model(height$Father5)
linear.model(height$Father height$Mother)
linear.model(height$Father ~ height$Mother)
library(Temp2)
a <- "string"
linear.model("string")
linear.model(height$Father ~ a)
linear.model(height$Height ~
height$Father+height$Mother+height$Gender+height$SES)
linear.model(height$Father ~ height$Mother)
library(Temp2)
linear.model(height$Father ~ height$Mother)
linear.model(height$Height ~
height$Father+height$Mother+height$Gender+height$SES)
linear.model(height$Height ~
height$Father+height$Mother+height$Gender+height$SES)
linear.model(height$Height ~ height$Father+height$Mother)
linear.model(height$Height ~ height$Father+height$Mother)
linear.model(height$Height ~
height$Father+height$Mother+height$Gender+height$SES)
linear.model(height$Height ~ height$Father+height$Mother)
linear.model(height$Height ~ height$Gender)
linear.model(height$Height ~ height$Father)
linear.model(height$Height ~ height$SES)
summary(lm(height$Height ~ height$SES))
summary(lm(height$Height ~ height$SES+height$Father+height$Gender))
linear.model(height$Height ~ height$SES+height$Father+height$Gender)
linear.model(height$Height ~ height$Father*height$Mother+height$Father+height$Mother)
linear.model(height$Height ~ height$Father+height$Mother)
linear.model(height$Height ~ (height$Father+height$Mother)
linear.model(height$Height ~ (height$Father+height$Mother))
linear.model(height$Height ~ height$Father+height$Mother)
buller <- height$Father+height$Mother
buller
linear.model(height$Height ~ buller)
linear.model(height$Height ~ buller/2)
buller <- (height$Father+height$Mother)/2
buller
linear.model(height$Height ~ buller)
linear.model(height$Height ~ buller)
library(Temp2)
bootstrap()
bootstrap(3)
bootstrap(3,4)
bootstrap(c(8,9),c(9,8))
bootstrap(cars$speed,cars$dist)
library(Temp2)
library(Temp2)
buffon.needle("string")
library(Temp2)
buffon.needle("string")
buffon.needle(a)
buffon.needle(buller)
buffon.needle(0)
buffon.needle(-2)
buffon.needle(12)
buffon.needle(3)
library(Temp2)
linear.model(cars$speed,cars$dist)
linear.model(cars$speed ~ cars$dist)
Density(cars$speed,3,0.33,method = "kernel")
Density.plot(cars$speed,n = 500,method = "kernel")
MarkovChain(p=matrix(c(.5,.5,.02,.8),2,2,byrow=TRUE),4,1000)
library(Temp2)
chi.probability(chi.GOF(gum$Number,p=1),length(gum$Number)-1,10000)
library(Temp2)
MarkovChain(p=matrix(c(.5,.5,.02,.8),2,2,byrow=TRUE),4,1000)
MarkovChain(p=matrix(c(.5,.5,.02,.8),2,2,byrow=TRUE),2,1000)
MarkovChain(p=matrix(c(-1,2,.5,.5),2,2,byrow=TRUE),2,1000)
library(Temp2)
